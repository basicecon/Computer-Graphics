// generated by Fast Light User Interface Designer (fluid) version 1.0108

#ifndef gui_h
#define gui_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Input.H>
#include <FL/Fl_File_Input.H>

class GUI {
public:
  GUI();
  Fl_Double_Window *uiw;
  Fl_Button *VisualizeButton;
private:
  void cb_VisualizeButton_i(Fl_Button*, void*);
  static void cb_VisualizeButton(Fl_Button*, void*);
  void cb_Up_i(Fl_Button*, void*);
  static void cb_Up(Fl_Button*, void*);
  void cb_Down_i(Fl_Button*, void*);
  static void cb_Down(Fl_Button*, void*);
  void cb_Left_i(Fl_Button*, void*);
  static void cb_Left(Fl_Button*, void*);
  void cb_Right_i(Fl_Button*, void*);
  static void cb_Right(Fl_Button*, void*);
  void cb_Front_i(Fl_Button*, void*);
  static void cb_Front(Fl_Button*, void*);
  void cb_Back_i(Fl_Button*, void*);
  static void cb_Back(Fl_Button*, void*);
  void cb_Zoom_i(Fl_Button*, void*);
  static void cb_Zoom(Fl_Button*, void*);
  void cb_Zoom1_i(Fl_Button*, void*);
  static void cb_Zoom1(Fl_Button*, void*);
  void cb_Pan_i(Fl_Button*, void*);
  static void cb_Pan(Fl_Button*, void*);
  void cb_Tilt_i(Fl_Button*, void*);
  static void cb_Tilt(Fl_Button*, void*);
  void cb_Roll_i(Fl_Button*, void*);
  static void cb_Roll(Fl_Button*, void*);
public:
  Fl_Input *pointlightX;
private:
  void cb_pointlightX_i(Fl_Input*, void*);
  static void cb_pointlightX(Fl_Input*, void*);
public:
  Fl_Input *pointlightY;
private:
  void cb_pointlightY_i(Fl_Input*, void*);
  static void cb_pointlightY(Fl_Input*, void*);
public:
  Fl_Input *pointlightZ;
private:
  void cb_pointlightZ_i(Fl_Input*, void*);
  static void cb_pointlightZ(Fl_Input*, void*);
public:
  Fl_Input *ka;
private:
  void cb_ka_i(Fl_Input*, void*);
  static void cb_ka(Fl_Input*, void*);
public:
  Fl_Input *es;
private:
  void cb_es_i(Fl_Input*, void*);
  static void cb_es(Fl_Input*, void*);
public:
  Fl_Button *SM1;
private:
  void cb_SM1_i(Fl_Button*, void*);
  static void cb_SM1(Fl_Button*, void*);
public:
  Fl_Button *SM2;
private:
  void cb_SM2_i(Fl_Button*, void*);
  static void cb_SM2(Fl_Button*, void*);
public:
  Fl_Button *SM3;
private:
  void cb_SM3_i(Fl_Button*, void*);
  static void cb_SM3(Fl_Button*, void*);
public:
  Fl_Button *SM2Play;
private:
  void cb_SM2Play_i(Fl_Button*, void*);
  static void cb_SM2Play(Fl_Button*, void*);
public:
  Fl_Button *SM3Play;
private:
  void cb_SM3Play_i(Fl_Button*, void*);
  static void cb_SM3Play(Fl_Button*, void*);

public:
	Fl_Button *Load;
private:
	void cb_Load_i(Fl_Button*, void*);
	static void cb_Load(Fl_Button*, void*);
public:
	Fl_File_Input *Filename;
private:
	void cb_Filename_i(Fl_File_Input*, void*);
	static void cb_Filename(Fl_File_Input*, void*);

public:
  Fl_Button *Bilinear;
private:
  void cb_Bilinear_i(Fl_Button*, void*);
  static void cb_Bilinear(Fl_Button*, void*);
public:
  Fl_Button *Neighbor;
private:
  void cb_Neighbor_i(Fl_Button*, void*);
  static void cb_Neighbor(Fl_Button*, void*);
public:
  Fl_Button *Repetition;
private:
  void cb_Repetition_i(Fl_Button*, void*);
  static void cb_Repetition(Fl_Button*, void*);
public:
  Fl_Button *Mirroring;
private:
  void cb_Mirroring_i(Fl_Button*, void*);
  static void cb_Mirroring(Fl_Button*, void*);
public:
  void show();
  void LoadFile_cb();
  void ReadFile_cb();
  void visualize_cb();
  void up_cb();
  void down_cb();
  void left_cb();
  void right_cb();
  void front_cb();
  void back_cb();
  void pan_cb();
  void tilt_cb();
  void roll_cb();
  void zoomin_cb();
  void zoomout_cb();
  void pointlightX_cb();
  void pointlightY_cb();
  void pointlightZ_cb();
  void ka_cb();
  void es_cb();
  void sm1_cb();
  void sm2_cb();
  void sm3_cb();
  void sm2Play_cb();
  void sm3Play_cb();
  //void browse_cb();
  void bilinear_cb();
  void neighbor_cb();
  void repeat_cb();
  void mirror_cb();
};
#endif
